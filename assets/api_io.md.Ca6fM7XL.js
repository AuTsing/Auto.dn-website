import{_ as a,c as s,o,ag as l}from"./chunks/framework.Bw-5EFTY.js";const k=JSON.parse('{"title":"io 输入输出","description":"","frontmatter":{},"headers":[],"relativePath":"api/io.md","filePath":"api/io.md"}'),e={name:"api/io.md"};function n(t,i,h,r,d,p){return o(),s("div",null,i[0]||(i[0]=[l(`<h1 id="io-输入输出" tabindex="-1">io 输入输出 <a class="header-anchor" href="#io-输入输出" aria-label="Permalink to &quot;io 输入输出&quot;">​</a></h1><p>该模块提供对安卓设备的输入输出操作。</p><h2 id="io-toast" tabindex="-1">io.toast <a class="header-anchor" href="#io-toast" aria-label="Permalink to &quot;io.toast&quot;">​</a></h2><p><code>toast(...args: any): void</code></p><ul><li><code>args</code> 任何类型的参数，最终会将其转换为字符串输出。</li></ul><p>在屏幕输出 Toast 信息。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">toast</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Android.io;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toast</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Hello from toast!&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><h2 id="io-log-日志" tabindex="-1">io.log 日志 <a class="header-anchor" href="#io-log-日志" aria-label="Permalink to &quot;io.log 日志&quot;">​</a></h2><p>日志对象，可以在应用的日志屏幕输出日志。</p><h2 id="io-log-verbose" tabindex="-1">io.log.verbose <a class="header-anchor" href="#io-log-verbose" aria-label="Permalink to &quot;io.log.verbose&quot;">​</a></h2><p><code>verbose(...args: any): void</code></p><ul><li><code>args</code> 任何类型的参数，最终会将其转换为字符串输出。</li></ul><p>输出级别为 <code>VERBOSE</code> 的日志。</p><h2 id="io-log-info" tabindex="-1">io.log.info <a class="header-anchor" href="#io-log-info" aria-label="Permalink to &quot;io.log.info&quot;">​</a></h2><p><code>info(...args: any): void</code></p><ul><li><code>args</code> 任何类型的参数，最终会将其转换为字符串输出。</li></ul><p>输出级别为 <code>INFO</code> 的日志。</p><h2 id="io-log-debug" tabindex="-1">io.log.debug <a class="header-anchor" href="#io-log-debug" aria-label="Permalink to &quot;io.log.debug&quot;">​</a></h2><p><code>debug(...args: any): void</code></p><ul><li><code>args</code> 任何类型的参数，最终会将其转换为字符串输出。</li></ul><p>输出级别为 <code>DEBUG</code> 的日志。</p><h2 id="io-log-warn" tabindex="-1">io.log.warn <a class="header-anchor" href="#io-log-warn" aria-label="Permalink to &quot;io.log.warn&quot;">​</a></h2><p><code>warn(...args: any): void</code></p><ul><li><code>args</code> 任何类型的参数，最终会将其转换为字符串输出。</li></ul><p>输出级别为 <code>WARN</code> 的日志。</p><h2 id="io-log-error" tabindex="-1">io.log.error <a class="header-anchor" href="#io-log-error" aria-label="Permalink to &quot;io.log.error&quot;">​</a></h2><p><code>error(...args: any): void</code></p><ul><li><code>args</code> 任何类型的参数，最终会将其转换为字符串输出。</li></ul><p>输出级别为 <code>ERROR</code> 的日志。</p><h2 id="io-log-assert" tabindex="-1">io.log.assert <a class="header-anchor" href="#io-log-assert" aria-label="Permalink to &quot;io.log.assert&quot;">​</a></h2><p><code>assert(...args: any): void</code></p><ul><li><code>args</code> 任何类型的参数，最终会将其转换为字符串输出。</li></ul><p>输出级别为 <code>ASSERT</code> 的日志。</p><h2 id="io-log-v" tabindex="-1">io.log.v <a class="header-anchor" href="#io-log-v" aria-label="Permalink to &quot;io.log.v&quot;">​</a></h2><p><code>v(...args: any): void</code></p><ul><li><code>args</code> 任何类型的参数，最终会将其转换为字符串输出。</li></ul><p>同 <code>io.log.verbose</code></p><h2 id="io-log-i" tabindex="-1">io.log.i <a class="header-anchor" href="#io-log-i" aria-label="Permalink to &quot;io.log.i&quot;">​</a></h2><p><code>i(...args: any): void</code></p><ul><li><code>args</code> 任何类型的参数，最终会将其转换为字符串输出。</li></ul><p>同 <code>io.log.info</code></p><h2 id="io-log-d" tabindex="-1">io.log.d <a class="header-anchor" href="#io-log-d" aria-label="Permalink to &quot;io.log.d&quot;">​</a></h2><p><code>d(...args: any): void</code></p><ul><li><code>args</code> 任何类型的参数，最终会将其转换为字符串输出。</li></ul><p>同 <code>io.log.debug</code></p><h2 id="io-log-w" tabindex="-1">io.log.w <a class="header-anchor" href="#io-log-w" aria-label="Permalink to &quot;io.log.w&quot;">​</a></h2><p><code>w(...args: any): void</code></p><ul><li><code>args</code> 任何类型的参数，最终会将其转换为字符串输出。</li></ul><p>同 <code>io.log.warn</code></p><h2 id="io-log-e" tabindex="-1">io.log.e <a class="header-anchor" href="#io-log-e" aria-label="Permalink to &quot;io.log.e&quot;">​</a></h2><p><code>e(...args: any): void</code></p><ul><li><code>args</code> 任何类型的参数，最终会将其转换为字符串输出。</li></ul><p>同 <code>io.log.error</code></p><h2 id="io-log-a" tabindex="-1">io.log.a <a class="header-anchor" href="#io-log-a" aria-label="Permalink to &quot;io.log.a&quot;">​</a></h2><p><code>a(...args: any): void</code></p><ul><li><code>args</code> 任何类型的参数，最终会将其转换为字符串输出。</li></ul><p>同 <code>io.log.a</code></p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Android.io;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">log.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">verbose</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Hello from log.verbose!&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">log.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">info</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Hello from log.info!&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">log.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">debug</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Hello from log.debug!&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">log.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">warn</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Hello from log.warn!&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">log.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">error</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Hello from log.error!&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">log.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">assert</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Hello from log.assert!&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div>`,58)]))}const c=a(e,[["render",n]]);export{k as __pageData,c as default};
